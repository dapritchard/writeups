#+TITLE: Learning Org mode

* Resources

- The Org mode manual: https://orgmode.org/org.html.
- A collection of other useful resources https://orgmode.org/worg/. In particular,
  see the /Org-mode tutorials/ page.
- Rainer König's org mode presentations on YouTube at
  https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE.
- Derek Taylor's /Org Mode Basics In Doom Emacs/ video on YouTube: https://youtu.be/34zODp_lhqg.

* Org for GDT

Resources:
- A collection of links related to Org for GTD:
  https://orgmode.org/worg/org-gtd-etc.html.
- A Reddit thread with some useful comments and links to other resources:
  https://www.reddit.com/r/emacs/comments/i09ncw/discussion_using_emacsorgmode_to_manage_life/.
- Nicolas Petton's /Orgmode for GTD/:
  https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html.
- Tasshin Fogleman's /Plan Your Day: Daily Time Management with Emacs, Org-Mode,
  and Google Calendar/:
  https://tasshin.com/blog/plan-your-day-daily-time-management-with-emacs-org-mode-and-google-calendar/.
- Charles Cave's /How I use Emacs and Org-mode to implement GTD/:
  http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
- Jethro Kuan's /Org-mode Workflow/:
  https://blog.jethro.dev/posts/org_mode_workflow_preview/.


** Getting things done general resources

- Erlend Hamburg's /GTD in 15 minutes - A Pragmatic Guide to Getting Things
  Done/: https://hamberg.no/gtd.

Maybe?
 - https://lifehacker.com/productivity-101-a-primer-to-the-getting-things-done-1551880955
 - https://joshkaufman.net/getting-things-done/

* Doom keybindings

To see the full list of keybindings, as usual you can use =describe-mode= (=C h
m=).

It is worth noting that the usual outline commands such as =outline-promote= and
=outline-demote= (and found in the =g= prefix) are remapped to Org mode specific
commands.

- Prefix keys
  - =SPC m= prefixes Org-specific bindings.
  - =z= has additional commands.
  - =g= has outline movements such as =g j= and =g k=.
- Top-level bindings
  - =C-return= to add a header or item (context-sensitive) at the current level.
  - =M-return= to add a header at the current level.
  - =C-k= and =C-j= to move up/down the headers at the same level.
  - =M-h= and =M-l= to promote/demote headers or list elements.
  - =M-k= and =M-j= to move up/down headers or list elements.
  - =M-K= and =M-J= to move up/down a single header or list element.
  - =v a e= and =d a e= to select/delete an element.
  - =v a R= and =d a R= to select/delete a subtree.
  - =S-<left>= or =S-<right>= (i.e. shift left/right arrow) toggles to-do items.
    Alternatively, you can use the =SPC m t= prefix to add a to-do state.


* Rainer König's org mode presentations on YouTube

When in org-mode, the usual mode-specific top-level prefix is =SPC m=.

** E01S01: Headlines and outline mode

*** Relevant links

- Rainer's video:

*** Video content

** E01S02: TODO keywords

*** Relevant links

- Rainer's video:

*** Video content

** EO1S03: Schedule, deadline, and agenda view

See https://www.youtube.com/watch?v=IofHvutUWV0&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&index=3&t=3s.

Use =SPC m d= to activate the date/deadline prefix.

- =SPC m d s= (=org-schedule=) invokes a pop-up buffer with a calendar
  representation that allows you to schedule a start date for your item. Using
  the =C-h=, =C-j=, =C-k=, and =C-l= keys allows you to navigate the calendar,
  and you can press enter to pick a date.
- =SPC m d d= invokes a pop-up calendar buffer as with =org-schedule=, but for a
  deadline date instead.
- =SPC n a= or =SPC o A= or =SCP o a a= (=org-agenda=) invokes a pop-up that
  allows you to view a agenda or list of =TODO= items.


** E01S04: Repeating tasks

This video is about scheduling recurring tasks, such as for example adding a
weekly task to mow the lawn. In the timestamp field you can add a so-called
repeater element that might look like e.g. =+1m=, with the meaning that the task
has is intended to be completed every 1-month interval after the original date.

There are other forms for the repeater element. One is a form such as e.g.
=++1m= which means that if a task is overdue by multiple scheduled events and
you complete the task, that the next scheduled task is moved forward enough to
be in the future. Another is a form such as e.g. =.+1m= which means that if a
task is completed then another task is scheduled one week after the completion
date.

*** Relevant links:

- Rainer's video: https://www.youtube.com/watch?v=nbC-gL5wcf4&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&index=4.
- The Org Manual Repeated Tasks: https://orgmode.org/manual/Repeated-tasks.html.

** E01S05: Checklists

This video is about checkboxes, which allow you to essentially add a radio
button (i.e. a toggle) to a list item indicating whether the item has been
completed. As noted in the Org manual, checkboxes are similar to TODO items but
are aren't included in the global TODO list, which makes them convenient to use
to split a task into a number of smaller steps.

- A given item in a list can be made into a checkbox item by adding =[ ]= after
  the list starting string (e.g. =- [ ]= or =1. [ ]=). Use =SPC u g r= to toggle
  the presence of a checkbox.
- If the item is completed then you can mark a given checkbox as completed by
  replacing =[ ]= with e.g. =[-]= or =[X]=. Use =g r= to toggle the completion
  state of a given checkbox.
- Place =[/]= or =[%]= before a list to obtain a running tally indicating how
  many tasks have been completed in a list. The former gives you a count such as
  e.g. =[2/4]=, while the latter gives you a percentage such as =[50%]=

*** Relevant links:

- Rainer's video: https://www.youtube.com/watch?v=gvgfmED8RD4&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&index=5.
- The Org Manual Checkboxes: https://orgmode.org/manual/Checkboxes.html.

** E02S01: Tags

This video is about tags, which are a mechanism for assigning labels to
headlines that can then be used to create cross-reference information according
to their tags (recall that headlines are what Org calls the lines starting with
=*=, =**=, etc. that define the document sections and subsections).

- The tags are creating by placing a word surrounded by colons such as =:work:=
  at the end of a headline.
- Multiple tags take the form =:work:urgent:=.
- Tags are inherited hierarchically (a child section recursively inherits tags
  from its parent).
- Use =SPC m q= (=counsel-org-tag=) to create a tag. Note that the interface
  provided by the =counsel-org-tag= is different than the one shown in the
  video.
  - You can build up a collection of tags through multiple invocations of
    =counsel-org-tag=.
  - Select a tag that is already part of the headline definition to remove it.
  - Use =C-M-m= to make multiple selections (see the link below for more
    details).

*** Relevant links:

- Rainer's video: https://youtu.be/GcUVvlClo9k.
- The Org Manual Tags: https://orgmode.org/manual/Tags.html.
- Swiper key bindings for multiple selections and actions: http://oremacs.com/swiper/#key-bindings-for-multiple-selections-and-actions-keep-minibuffer-open.

** E02S02: Agenda view

*** Relevant links

- Rainer's video: https://youtu.be/GcUVvlClo9k.
- The Org Manual Agenda Dispatcher:
  https://orgmode.org/manual/Agenda-Dispatcher.html#Agenda-Dispatcher.

*** Video content

This video is about the Agenda view, which is a way of constructing a new buffer
with (a possibly filtered) set of the TODO items for a given buffer.

- This video references Follow mode, which is toggled using
  =org-agenda-follow-mode=. The usual keybinding for this is =F=, but in Doom
  Emacs this is of course shadowed by =evil-find-char-backward= and there
  isn't another keybinding provided for it.
- Org Timeline is referred to in the video but as of Org 9.1 this feature has
  been removed. The following note is provided in
  https://www.orgmode.org/Changes_old.html.
  #+BEGIN_QUOTE
  Use a custom agenda view, possibly narrowed to current buffer to achieve a
  similar functionality.
   #+END_QUOTE
- =SPC n a= followed by =t= opens a list of all open TODO items.
  - There are instructions at the top of the agenda buffer for narrowing the
    type of TODO items.
  - Note that the resulting list includes the general class of "TODO"s, i.e.
    any items labeled with any of the TODO keywords that you have defined.
- =SPC n a= followed by =T= opens a list of all open TODO items narrowed to a
  certain keyword or keywords (use the =|= operator to construct a logical
  =OR= similar in spirit to how you would do with a regular expression).
- =SPC n a= followed by =M= opens a list of all open TODO items narrowed to a
  certain keyword or keywords.
  - There are instructions at the top of the agenda buffer for changing the
    search string (but note that in normal mode in Doom Emacs rather than the
    directed =C-u r= you want to use =SPC u r=).
  - If you want to match a certain tag among the TODOs with a certain keyword
    then you can use syntax of the form =TAGLABEL/KEYWORDLABEL=.

** E02S03: Customized agenda views

*** Relevant links

- Rainer's video: https://youtu.be/PJ3qHIl-eOM.
- The documentation for the variable =org-agenda-custom-commands=.
- Worg's Custom Agenda Commands.
- Aaron Bieber's /An Agenda for Life With Org Mode/:
  https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html.
- The Org Manual Custom Agenda Views:
  https://orgmode.org/manual/Custom-Agenda-Views.html#Custom-Agenda-Views.

*** Video content

This video is about custom Agenda views, which allow you to customize how Agenda
performs its searches and displays the results.

- In the video the Emacs customization interface is used, but if you want to
  create the custom Org agendas programatically then the above links should
  provide plenty of information about how to do so.

** E02S04: Drawers, logging, and quick notes

*** Relevant links

- Rainer's video: https://youtu.be/nUvdddKZQzs.
- The Org Manual Drawers: https://orgmode.org/manual/Drawers.html.

*** Video content

This video is about drawers and logging notes into drawers. Drawers provide a
way to store information for a given task that is by default not displayed on
the screen. This functionality is similar to changing the outline visibility,
but without having to change the document structure (i.e. without having to add
a new section in the document).
 
- Start a line with text of the form =:DRAWERNAME:= followed by another line
  starting with =:END:= (with both lines adhering the current level of
  indentation) to create a drawer. Note that the drawer names =:LOGBOOK:= and
  =:PROPERTIES:= have special meaning.
- The string used to declare the start of the drawer doesn't have any
  significance except as a clue to the reader as to what drawer contains (with
  the exception of the aforementioned "special" drawers) .
- Drawers can contain anything but a headline or another drawer.
- The text within a drawer is hidden by default. Press =TAB= while on the line
  declaring the start of the drawer to toggle the visibility of the drawers.
- Set =org-log-into-drawer= to a non-nil value to store various
  timestamp-related information into per-task drawers.
  - Setting =org-log-into-drawer= to =t= stores the information in a =:LOGBOOK:=
    drawer, otherwise you can provide a string to specify the name of the drawer
    to use.
  - The advantage of enabling this setting is that otherwise the information is
    stored as part of the task which can lead to a lot of visual clutter.
  - See the Drawers section in the Org manual for exactly what timestamp-related
    information is stored into the specified drawer.
- Add a note for a given task by using =C-c C-z= (=org-log-into-drawer=).

** E02S05: Archiving

*** Relevant links

- Rainer's video: https://youtu.be/5M8L7vtWY1k.
- The Org Manual Archiving: https://orgmode.org/manual/Archiving.html.

*** Video content

Archiving means moving content (more precisely, an Org subtree) from one file to
another. A typical use-case is to remove a task once it has been completed from
your main file into an archive file. This is useful to stop such tasks from
contributing to your agenda view in your active to-do list and to keep view
compilations fast.

- A file can be specified where archived content will be stored.
  - The location of the archive is specified via the =org-archive-location=
    variable (see the variable documentation for details).
  - You can either specify a per-file archive or a global archive.
  - Alternatively, you can provide an in-buffer specification by placing an
    entry of the form =#+ARCHIVE myarchive.org::= at the top of the file.
  - The double-colon in =myarchive.org::= is used to separate a filename from a
    headline. The headline is where the archived content is to be stored, and if
    it is omitted (as it is in this example), then the content is simply
    appended to the end of the file.
- Use =SPC m A= or =SPC m s A= (=org-archive-subtree=) to move the current
  subtree to the archive.
- In the video a second command is mentioned: the one described as "Archive an
  entry" with keybinding =C-c C-x C-a=, which corresponds to
  =org-archive-subtree-default=. However the =org-archive-subtree-default=
  function uses a layer of indirection to allow you to provide a custom command,
  which by default it simply calls =org-archive-subtree=.
- Use a prefix argument with =org-archive-subtree= (e.g. =SPC u SPC m A=) to
  walk through the file and find any trees without any open TODO items and
  archive them (after getting confirmation from the user for each tree).
  - Note that there's also a double-prefix variant that's not mentioned in the
    video (see the function documentation for further information).

** E03S01: Automatic logging of status changes

*** Relevant links

- Rainer's video: https://youtu.be/R4QSTDco_w8.
- The Org Manual Tracking TODO state changes:
  https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes.

*** Video content

This video is about configuring automatic logging of status changes. For
example, whenever you move from =WAITING= to =TODO=, you might want to record a
timestamp so that you know how long a task has actually been actionable for you.

- When defining your TODO states (as described in E01S02), you can add some
  additional syntax to record a timestamp and optionally an accompanying note
  whenever a TODO state change occurs.
- Use =!= (as in =DONE(d!)=) to record just a timestamp when entering a given
  state.
- Use =@= (as in =CANCELED(c@)=) to record a timestamp plus a note when entering
  a given state.
- You can optionally include a =/= (as in =WAIT(w@/!)= or =WAIT(w/!)=) to
  separate enter-state from exit-state transitions.
  - Use the =!= or =@= symbols after the slash refer to exit state transitions.
    These have effect if and only if the target state does not configure logging
    for entering it.
  - So =WAIT(w@/!)= means to record a timestamp plus a note when entering a
    given state, and additionally to record a timestamp whenever leaving the
    state (for states that don't already have an enter-state transition defined
    (as in =DONE(d)=).
  - So =WAIT(w/!)= means that no logging is configured for whenever the =WAIT=
    state is entered, but that a timestamp is recorded whenever leaving the
    state (for states that don't already have an enter-state transition defined
    (as in =DONE(d)=).
- Use the variable =org-log-done= to provide a global setting for entering a
  =DONE= state.
- Use the variable =org-log-reschedule= to configure adding a timestamp or
  timestamp with note whenever the scheduling date of a task is modified.

** E03S02: Splitting your system up to several files

*** Relevant links

- Rainer's video: https://youtu.be/ECWtf6mAi9k.
- Org Manual Refile and Copy: https://orgmode.org/manual/Refile-and-Copy.html.
- Org Manual Summary of In-Buffer Settings:
  https://orgmode.org/manual/In_002dbuffer-Settings.html.

*** Video content

This video is about storing your Org content across multiple files, and
copying/moving Org headline subtrees within and across files.

- In the video, both of the example files have the same settings for the TODO
  and tags definitions. Another approach is to extract these settings into a
  separate file and point to it using the =#+SETUPFILE: file= setting (see the
  above link for in-buffer settings for details).
- In order to ensure that all of the desired files are considered for the agenda
  views, the variable =org-agenda-files= needs to be set appropriately. In Doom
  Emacs, this variable is set to the value of =(list org-directory)=, which
  loosely stated means that all files in =org-directory= are considered for the
  agenda views.
- In order to use =org-refile= to move content across files, the variable
  =org-refile-targets= needs to be set appropriately. In Doom Emacs this
  variable is set to a value based on =org-agenda-files=, which loosely stated
  has the effect of allowing you to refile either in the current buffer or into
  any of the Org files in the =org-refile-targets= directory.
- In order to be able to specify refile targets as paths, the variable
  =org-refile-use-outline-path= needs to be set appropriately. In Doom Emacs
  this variable is ='file= (the same as in the video), which allows you to
  specify e.g. a level 1 headline using syntax of the form
  =mylife.org/Examples=.
- In order to allow the creation of new nodes when refiling content, the
  variable =org-refile-allow-creating-parent-nodes= needs to be set to a non-nil
  value. In particular, you can set it to ='confirm= to prompt the user for
  confirmation before creating a new node.
- =SPC m r r= or =SPC m s r= (=org-refile=) allows you to move a subtree to
  another location.
- =C-c M-w= (=org-refile-copy=) allows you to copy a subtree to another
  location.
